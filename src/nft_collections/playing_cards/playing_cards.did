type Bid = record { amount : nat64; bidder : principal };
type ConstrainedError = variant { Unauthorized };
type Error = variant {
  InsufficientPrepaidBalance;
  NFTNotForSale;
  BidderAlreadyPlacedBid;
  BidderHasNotPlacedBid;
  ZeroAddress;
  BalanceRetrievalFailed;
  InsufficientBalance;
  InvalidTokenId;
  Unauthorized;
  Other;
  TransferFailed : text;
  PrepaidBalanceRetrievalFailed;
};
type InitArgs = record {
  logo : opt LogoResult;
  name : text;
  custodians : opt vec principal;
  symbol : text;
};
type InterfaceId = variant {
  Burn;
  Mint;
  Approval;
  TransactionHistory;
  TransferNotification;
};
type LogoResult = record { data : text; logo_type : text };
type MetadataPart = record {
  data : vec nat8;
  key_val_data : vec record { text; MetadataVal };
  purpose : MetadataPurpose;
};
type MetadataPurpose = variant { Preview; Rendered };
type MetadataVal = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  Nat8Content : nat8;
  NatContent : nat;
  Nat16Content : nat16;
  BlobContent : vec nat8;
  TextContent : text;
};
type MintResult = record { id : nat; token_id : nat64 };
type Nft = record {
  id : nat64;
  content : vec nat8;
  owner : principal;
  metadata : vec MetadataPart;
  approved : opt principal;
};
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : nat; Err : Error };
type Result_2 = variant { Ok : MintResult; Err : ConstrainedError };
type Result_3 = variant { Ok : principal; Err : Error };
type SaleInfo = record { bids : vec Bid; seller : principal; price : nat64 };
service : (InitArgs) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  acceptBid : (nat64, principal) -> (Result);
  approveDip721 : (principal, nat64) -> (Result_1);
  balanceOfDip721 : (principal) -> (nat64) query;
  burnDip721 : (nat64) -> (Result_1);
  buyNFT : (nat64) -> (Result);
  deposit : (nat64) -> (Result);
  getBidsByBidder : (principal) -> (vec record { nat64; Bid }) query;
  getBidsByNFT : (nat64) -> (opt vec Bid) query;
  getSaleInfo : (nat64) -> (opt SaleInfo) query;
  getTokensForSale : () -> (vec record { nat64; SaleInfo }) query;
  isApprovedForAllDip721 : (principal) -> (bool) query;
  is_custodian : (principal) -> (bool) query;
  listAllNftsFull : () -> (vec Nft) query;
  mintDip721 : (principal, vec MetadataPart, vec nat8) -> (Result_2);
  nameDip721 : () -> (text) query;
  ownerOfDip721 : (nat64) -> (Result_3) query;
  placeBid : (nat64, nat64) -> (Result);
  putForSale : (nat64, nat64) -> (Result);
  removeBid : (nat64, principal) -> (Result);
  removeFromSale : (nat64) -> (Result);
  safeTransferFromDip721 : (principal, principal, nat64) -> (Result_1);
  safeTransferFromNotifyDip721 : (principal, principal, nat64, vec nat8) -> (
      Result_1,
    );
  setApprovalForAllDip721 : (principal, bool) -> (Result_1);
  set_custodian : (principal, bool) -> (Result);
  set_logo : (opt LogoResult) -> (Result);
  set_name : (text) -> (Result);
  set_symbol : (text) -> (Result);
  supportedInterfacesDip721 : () -> (vec InterfaceId) query;
  symbolDip721 : () -> (text) query;
  totalSupplyDip721 : () -> (nat64) query;
  transferFromDip721 : (principal, principal, nat64) -> (Result_1);
  transferFromNotifyDip721 : (principal, principal, nat64, vec nat8) -> (
      Result_1,
    );
  updateSalePrice : (nat64, nat64) -> (Result);
  withdraw : (nat64) -> (Result);
  withdrawBid : (nat64) -> (Result);
}
